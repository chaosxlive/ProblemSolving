# https://leetcode.com/problems/minimize-malware-spread-ii/

from typing import List
from collections import defaultdict


class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        initial.sort(reverse=True)
        result = initial[0]
        maxSavedCnt = 0
        for i in initial:
            res = self.minMalwareSpreadNotRemove(graph, initial, i)
            if res > maxSavedCnt:
                maxSavedCnt = res
                result = i
            elif res == maxSavedCnt:
                result = i
        return result

    def minMalwareSpreadNotRemove(self, graph: List[List[int]], initial: List[int], ignoredNode: int) -> int:
        uf = {}

        def find(x):
            if x not in uf:
                uf[x] = x
            elif uf[x] != x:
                uf[x] = find(uf[x])
            return uf[x]

        def union(x, y):
            rx, ry = find(x), find(y)
            if rx != ry:
                uf[rx] = ry

        for i in range(len(graph)):
            if i == ignoredNode:
                continue
            for j in range(i, len(graph)):
                if j == ignoredNode:
                    continue
                if graph[i][j] == 1:
                    union(i, j)

        groups = defaultdict(lambda: [0, 0])  # allNodeCnt, initNodeCnt
        for i in range(len(graph)):
            if i == ignoredNode:
                continue
            groups[find(i)][0] += 1
        for i in initial:
            if i == ignoredNode:
                continue
            groups[find(i)][1] += 1

        savedCnt = 0
        added = set()
        for i in range(len(graph)):
            if i == ignoredNode:
                continue
            root = find(i)
            if root in added:
                continue
            group = groups[root]
            if group[1] == 0:
                added.add(root)
                savedCnt += group[0]
        return savedCnt
