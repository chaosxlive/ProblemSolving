# https://leetcode.com/problems/minimize-malware-spread/

from typing import List
from collections import defaultdict


class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        uf = {}

        def find(x):
            if x not in uf:
                uf[x] = x
            elif uf[x] != x:
                uf[x] = find(uf[x])
            return uf[x]

        def union(x, y):
            rx, ry = find(x), find(y)
            if rx != ry:
                uf[rx] = ry

        for i in range(len(graph)):
            for j in range(i, len(graph)):
                if graph[i][j] == 1:
                    union(i, j)

        groups = defaultdict(lambda: [0, 0])  # allNodeCnt, initNodeCnt
        for i in range(len(graph)):
            groups[find(i)][0] += 1
        for i in initial:
            groups[find(i)][1] += 1

        initial.sort(reverse=True)

        resultNode = initial[0]
        savedCnt = 0
        for i in initial:
            group = groups[find(i)]
            if group[1] == 1 and group[0] >= savedCnt:
                resultNode = i
                savedCnt = group[0]
            elif savedCnt == 0:
                resultNode = i
        return resultNode
