{
	// Place your ProblemSolving workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Generate import List statement": {
		"scope": "python",
		"prefix": "importList",
		"body": "from typing import List"
	},
	"Generate import Optional statement": {
		"scope": "python",
		"prefix": "importOptional",
		"body": "from typing import Optional"
	},
	"Generate 4-way direction": {
		"scope": "python",
		"prefix": "dir4",
		"body": "dirs = ((0, 1), (0, -1), (1, 0), (-1, 0))"
	},
	"Generate 8-way direction": {
		"scope": "python",
		"prefix": "dir8",
		"body": "dirs = ((-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1))"
	},
	"Generate union find structure": {
		"scope": "python",
		"prefix": "genUF",
		"body": [
			"uf = {}",
			"",
			"def find(x):",
			"    if x not in uf:",
			"        uf[x] = x",
			"    elif uf[x] != x:",
			"        uf[x] = find(uf[x])",
			"    return uf[x]",
			"",
			"def union(x, y):",
			"    rx, ry = find(x), find(y)",
			"    if rx != ry:",
			"        uf[rx] = ry"
		]
	}
}